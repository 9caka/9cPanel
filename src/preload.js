const { contextBridge, ipcRenderer } = require('electron');

contextBridge.exposeInMainWorld('electronAPI', {
  launchProject: (payload) => ipcRenderer.send('launch-project', payload),
  minimizeWindow: () => ipcRenderer.send('window:minimize'),
  maximizeWindow: () => ipcRenderer.send('window:maximize'),
  closeWindow: () => ipcRenderer.send('window:close'),
  saveItems: (payload) => ipcRenderer.send('save-items', payload),
  onSaveSuccess: (callback) => ipcRenderer.on('save-success', callback),
  onSaveError: (callback) => ipcRenderer.on('save-error', callback),
  readFile: (filePath) => ipcRenderer.invoke('read-file', filePath),
  openDialog: (options) => ipcRenderer.invoke('dialog:open', options),
  onSystemStats: (callback) => ipcRenderer.on('system-stats', (event, ...args) => callback(...args)),
  openExternalLink: (url) => ipcRenderer.send('open-external-link', url),
  getProjectDetails: (projectPath) => ipcRenderer.invoke('get-project-details', projectPath),
  projectAction: (payload) => ipcRenderer.send('project-action', payload),
  onLaunchSuccess: (callback) => ipcRenderer.on('launch-success', (event, ...args) => callback(...args)),
  gitCommand: (payload) => ipcRenderer.invoke('git:command', payload),
  dockerCommand: (payload) => ipcRenderer.invoke('docker:command', payload),
  runNpmScript: (payload) => ipcRenderer.send('run-npm-script', payload),
  dbConnect: (filePath) => ipcRenderer.invoke('db:connect', filePath),
  dbQuery: (payload) => ipcRenderer.invoke('db:query', payload),
  dbClose: (filePath) => ipcRenderer.send('db:close', filePath),
  fetchRss: (url) => ipcRenderer.invoke('fetch-rss', url),
  envGetProjects: () => ipcRenderer.invoke('env:get-projects'),
  envRead: (projectPath) => ipcRenderer.invoke('env:read', projectPath),
  envSave: (payload) => ipcRenderer.invoke('env:save', payload),
  steamGetOwnedGames: () => ipcRenderer.invoke('steam:get-owned-games'),
  steamLaunchGame: (appId) => ipcRenderer.send('steam:launch-game', appId),
  steamGetInstalledApps: () => ipcRenderer.invoke('steam:get-installed-apps'),
  steamGetGameDetails: (appid) => ipcRenderer.invoke('steam:get-game-details', appid),
  steamGetPlayerAchievements: (appid) => ipcRenderer.invoke('steam:get-player-achievements', appid),
  getLaunchOnStartup: () => ipcRenderer.invoke('get-launch-on-startup'),
  setLaunchOnStartup: (shouldLaunch) => ipcRenderer.send('set-launch-on-startup', shouldLaunch),
  onUpdateInfo: (callback) => ipcRenderer.on('update-info', (event, ...args) => callback(...args)),
  onUpdateDownloadProgress: (callback) => ipcRenderer.on('update-download-progress', (event, ...args) => callback(...args)),
  onUpdateDownloaded: (callback) => ipcRenderer.on('update-downloaded', callback),
  downloadUpdate: () => ipcRenderer.send('download-update'),
  restartApp: () => ipcRenderer.send('restart-app'),
  getAppVersion: () => ipcRenderer.invoke('get-app-version'),
});